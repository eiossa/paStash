{
  "_args": [
    [
      "lumberjack-protocol@git://github.com/bpaquet/node-lumberjack-protocol.git",
      "/home/enrico/pastash"
    ]
  ],
  "_from": "git://github.com/bpaquet/node-lumberjack-protocol.git",
  "_id": "lumberjack-protocol@1.0.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/lumberjack-protocol",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/bpaquet/node-lumberjack-protocol/master/package.json",
      "gitUrl": "git://github.com/bpaquet/node-lumberjack-protocol.git",
      "httpsUrl": "git+https://github.com/bpaquet/node-lumberjack-protocol.git",
      "shortcut": "github:bpaquet/node-lumberjack-protocol",
      "ssh": "git@github.com:bpaquet/node-lumberjack-protocol.git",
      "sshUrl": "git+ssh://git@github.com/bpaquet/node-lumberjack-protocol.git",
      "type": "github"
    },
    "name": "lumberjack-protocol",
    "raw": "lumberjack-protocol@git://github.com/bpaquet/node-lumberjack-protocol.git",
    "rawSpec": "git://github.com/bpaquet/node-lumberjack-protocol.git",
    "scope": null,
    "spec": "git://github.com/bpaquet/node-lumberjack-protocol.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/bpaquet/node-lumberjack-protocol.git#7c0abc7f2d107b9d344f3e7a37c2966125953122",
  "_shasum": "f01ec3ecdb3764ae5f7c091c7a54e1517eff7648",
  "_shrinkwrap": null,
  "_spec": "lumberjack-protocol@git://github.com/bpaquet/node-lumberjack-protocol.git",
  "_where": "/home/enrico/pastash",
  "author": {
    "email": "dev@lucid.thedreaming.org",
    "name": "Jason Walton",
    "url": "https://github.com/jwalton"
  },
  "bugs": {
    "url": "https://github.com/benbria/node-lumberjack-protocol/issues"
  },
  "dependencies": {},
  "description": "Node.js implementation of the lumberjack protocol.",
  "devDependencies": {
    "chai": "^3.4.1",
    "coffee-coverage": "^0.7.0",
    "coffee-script": "^1.8.0",
    "coveralls": "^2.11.2",
    "istanbul": "^0.4.1",
    "mocha": "^2.3.4",
    "sinon": "^1.17.2"
  },
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">=0.10.1"
  },
  "gitHead": "7c0abc7f2d107b9d344f3e7a37c2966125953122",
  "homepage": "https://github.com/benbria/node-lumberjack-protocol#readme",
  "keywords": [
    "logs",
    "logstash",
    "logstash forwarder",
    "lumberjack",
    "lumberjack protocol"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/benbria/node-lumberjack-protocol/master/LICENSE"
    }
  ],
  "main": "./lib/index.js",
  "name": "lumberjack-protocol",
  "optionalDependencies": {},
  "readme": "[![NPM](https://nodei.co/npm/lumberjack-protocol.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/lumberjack-protocol/)\n\n[![Build Status](https://travis-ci.org/benbria/node-lumberjack-protocol.svg?branch=master)](https://travis-ci.org/benbria/node-lumberjack-protocol)\n[![Coverage Status](https://coveralls.io/repos/benbria/node-lumberjack-protocol/badge.svg)](https://coveralls.io/r/benbria/node-lumberjack-protocol)\n[![Dependency Status](https://david-dm.org/benbria/node-lumberjack-protocol.svg)](https://david-dm.org/benbria/node-lumberjack-protocol)\n[![devDependency Status](https://david-dm.org/benbria/node-lumberjack-protocol/dev-status.svg)](https://david-dm.org/benbria/node-lumberjack-protocol#info=devDependencies)\n\nWhat is it?\n===========\n\nThis is a node.js implementation of the [lumberjack protocol](https://github.com/elasticsearch/logstash-forwarder/blob/master/PROTOCOL.md) from [logstash-forwarder](https://github.com/elasticsearch/logstash-forwarder).\n\nAt the moment, only the sender-side implementation is complete.  This is an excellent way to send\nencrypted logs from your node.js app to your logstash instance.  If you are using [bunyan](https://github.com/trentm/node-bunyan), be sure to check out [bunyan-lumberjack](https://github.com/benbria/node-bunyan-lumberjack).\n\nContents\n--------\n\n* [Installation](#installation)\n* [Usage](#usage)\n* [API](https://github.com/benbria/node-lumberjack-protocol/blob/master/API.md)\n* [Caveats](#caveats)\n* [Troubleshooting](#troubleshooting)\n\n\nInstallation\n============\n\n    npm install --save lumberjack-protocol\n\nUsage\n=====\n\nCreate a lumberjack `Client`; it will connect to the server in the background, automatically\nreconnect, and queue any messages that you try to send while disconnected:\n\n    var lumberjack = require('lumberjack-protocol');\n    var fs = require('fs');\n\n    var connectionOptions = {\n        host: \"myserver.com\",\n        port: 5000,\n        ca: [fs.readFileSync('./logstash.crt', {encoding: 'utf-8'})]\n    };\n\n    var client = lumberjack.client(connectionOptions, {maxQueueSize: 500});\n\n    client.writeDataFrame({\"line\": \"Hello World!\"});\n\nAPI\n===\n\nFull API documentation can be found [here](https://github.com/benbria/node-lumberjack-protocol/blob/master/API.md).\n\nCaveats\n=======\n\nAccording to the [lumberjack specification](https://github.com/elasticsearch/logstash-forwarder/blob/master/PROTOCOL.md#window-size-frame-type),\nthe window size is \"maximum number of unacknowledged data frames the writer will send\nbefore blocking for acks.\"  Node.js doesn't support blocking IO; you might think it would\nbe reasonable to drop messages if the client runs into the window size, but in actual fact\nthe current logstash implementation will only send an ack every `windowSize`th data frame.\nIn other words, if `windowSize` is 10, then logstash will only send an ack every 10th data\nframe, so when sending to logstash we would very often lose frames right after the 10th frame\nwhile waiting (which would be less than ideal.)\n\nAn alternative here would be to queue messages while we wait for the ack, and\nthen send all the queued messages in a burst.  This introduces a great deal of complexity,\nhowever, as we have to deal with queue management.  It does offer some advantages in that\nwe can be selective in how we drop messages (if the queue gets full, for example, we can purge all\nthe debug and info level events from the queue when it comes time to drop messages, for example,\nmeaning that the error messages will have a higher likelihood of getting through.)\n\nThe approach taken here is less nuaced - we'll send up to ten times the `windowSize` to the\nreceiver before waiting for an ack.  If we don't get an ack, we'll start dropping messages.\nYou can specify a `allowDrop(data)` function that will prevent messages from being dropped if\nthere are certain types of messages you want to ensure get through (errors, for example.)\n\nTroubleshooting\n===============\n\n### Hostname/IP doesn't match certificate's altnames\n\n* If you are connecting to a server using a hostname, the hostname must match either the subject's\n  CN in the certificate, or one of the certificate's subjectAltNames.\n* If you are connecting with an IP address, the IP address must be listed in the certificate's\n  subjectAltNames.  Note that node.js will not check to see if the IP matches the subject CN.\n* If you are using node >=0.11.x, you can use checkServerIdentity:\n\n        var lj = lumberjack.client({\n            checkServerIdentity: function (host, cert) {\n                return cert.subject.cn == \"expectedservername.com\";\n            },\n            ...\n        });\n\n* If you're doing testing, you can do this the very insecure way, but note this is **not secure**:\n\n        var lj = lumberjack.client({\n            rejectUnauthorized: false,\n            ...\n        });\n        \n  You may also see suggestions to set an enviroment variable:\n  \n      process.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n      \n  which is effectively the same thing.  Both of these options will bypass certificate checks which\n  will make it easy for a third party to intercept your traffic using a man-in-the-middle attack.\n  Do not set these options unless you are very sure you know what you are doing.\n\n### Error: self signed certificate, code: DEPTH_ZERO_SELF_SIGNED_CERT\n\nIf you're using a self-signed certificate, be sure you are passing it in the `ca` parameter to\nthe `connectOptions`.  You can fetch the certificate your server is using with openssl:\n\n    openssl s_client -showcerts -connect myserver.com:5000 -tls1\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/benbria/node-lumberjack-protocol.git"
  },
  "scripts": {
    "prepublish": "coffee -c -o lib src && mocha test",
    "test": "mocha && istanbul report text-summary lcov"
  },
  "version": "1.0.3"
}
